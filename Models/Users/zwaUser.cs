using System;
using System.Data.SqlClient;
using System.Linq;
using DbClass;
using Dapper;
using WMSWebAPI.Class;
namespace WMSWebAPI.Models
{
    /// <summary>
    /// zwaUser table in database
    /// and CRUD operation code
    /// </summary>
    public class zwaUser : IDisposable
    {
        /// <summary>
        /// Class properties
        /// </summary>
        #region start of the class properties
        public int sysId { get; set; } // generated by sql database
        public string companyId { get; set; } // get detaild from web api
        public string userIdName { get; set; } // enter by admini
        public string password { get; set; } // enter by admin
        public string sapId { get; set; } // generated by DIAPI in middleware
        public string displayName { get; set; } // enter by the admin
        public DateTime lastModiDate { get; set; } // system update
        public string lastModiUser { get; set; } // system update
        public string locked { get; set; } // enter by admin
        public int Roles { get; set; }  // get details from web api
        public string phoneNumber { get; set; }
        public string email { get; set; }
        public string RoleDesc { get; set; }
        public int groupId { get; set; }
        public string groupName { get; set; }
        public int createERPSalesEmp { get; set; } // Added by johnny, 20200421T1036 for create and check / ignore the creation of the ERP user
        #endregion end of the class member declaration

        // inner declaration
        string db_conn_sap;
        SqlTransaction transaction;
        SqlConnection conn;

        /// <summary>
        /// constructor for inherent child initialization
        /// use by the chile inherent
        /// </summary>
        /// <param name="obj"></param>
        protected zwaUser(zwaUser child)
        {
            sysId = child.sysId;
            companyId = child.companyId;
            userIdName = child.userIdName;
            password = child.password;
            sapId = child.sapId;
            displayName = child.displayName;
            lastModiDate = child.lastModiDate;
            lastModiUser = child.lastModiUser;
            locked = child.locked;
            Roles = child.Roles;
            phoneNumber = child.phoneNumber;
            email = child.email;
            RoleDesc = child.RoleDesc;
            groupId = child.groupId;
            groupName = child.groupName;
        }

        /// <summary>
        /// the construtor, for controller 
        /// </summary>
        public zwaUser(string dbConnectString) => db_conn_sap = dbConnectString;

        /// <summary>
        /// parematerless default constructor
        /// </summary>
        public zwaUser()
        {
        }

        /// <summary>
        /// Dispose code
        /// </summary>
        public void Dispose() => GC.Collect();

        /// start the class code part
        /// <summary>
        /// Getter to the error message
        /// </summary>
        /// <returns></returns>
        public string LastErrorMessage { get; private set; } = string.Empty;

        /// <summary>
        /// Dapper
        /// Start the transaction db to seek roll back
        /// </summary>
        void BeginTransaction()
        {
            try
            {
                conn = new SqlConnection(db_conn_sap);
                conn.Open();
                transaction = conn.BeginTransaction();
            }
            catch (Exception excep)
            {
                LastErrorMessage = $"{excep}";
            }
        }

        /// <summary>
        /// Dapper
        /// commit all the db transaction 
        /// </summary>
        void Commit()
        {
            try
            {
                transaction?.Commit();
                transaction?.Dispose();
                transaction = null;

                conn?.Close();
                conn?.Dispose();
                conn = null;
            }
            catch (Exception excep)
            {
                LastErrorMessage = $"{excep}";
            }
        }

        /// <summary>
        /// roll back the trasaction when erro occur
        /// </summary>
        void RollBack() => transaction?.Rollback();

        /// <summary>
        /// Get Company Users List
        /// </summary>
        /// <param name="company"></param>
        /// <returns></returns>
        public zwaUser[] GetCompanyUsersList(string companyName)
        {
            try
            {
                string query =
                        $"SELECT " +
                           $"t0.sysId" +
                           $",t0.companyId" +
                           $",t0.userIdName" +
                           $",t0.sapId" +
                           $",t0.displayName" +
                           $",t0.lastModiDate" +
                           $",t0.lastModiUser" +
                           $",t0.locked" +
                           $",t0.Roles" +
                           $",t0.phoneNumber" +
                           $",t0.email" +
                           $",t0.RoleDesc" +
                           $",t2.groupId" +
                           $",t2.groupName" +
                           $",t0.CreateERPSalesEmp " +
                       $"FROM {nameof(zwaUser)} t0 " +
                           $"LEFT JOIN {nameof(zwaUser1)} t1 ON t0.userIdName = t1.userIdName " +
                           $"LEFT JOIN {nameof(zwaUserGroup)} t2 ON t1.groupId = t2.groupId " +
                       $"WHERE t0.companyId = @companyName";
                
                using (var conn = new SqlConnection(this.db_conn_sap))
                {
                    return conn.Query<zwaUser>(query, new { companyName }).ToArray();
                }
            }
            catch (Exception excep)
            {
                LastErrorMessage = $"{excep}";
                return null;
            }
        }

        /// <summary>
        /// check 
        /// </summary>
        /// <param name="userId"></param>
        /// <returns></returns>
        bool IsUserGroupExist(string userIdName, int userId)
        {
            try
            {
                string query =
                    $"SELECT id " +
                    $"FROM {nameof(zwaUser1)} " +
                    $"WHERE userIdName = @userIdName " +
                    $"AND userId = @userId";

                var param = new { userIdName, userId };
                using (var conn = new SqlConnection(db_conn_sap))
                {
                    var zwaUser1Obj = conn.Query<zwaUser1>(query, param).FirstOrDefault();
                    return (zwaUser1Obj != null && zwaUser1Obj.id > 0);
                }
            }
            catch (Exception excep)
            {
                LastErrorMessage = $"{excep}";
                return false;
            }
        }

        /// <summary>
        /// return user - group - company object array
        /// </summary>
        /// <param name="companyId"></param>
        /// <param name="groupId"></param>
        /// <returns></returns>
        public zwaUser[] GetGroupUsers(string companyId, int groupId)
        {
            try
            {
                string query =
                        $"SELECT DISTINCT " +
                            $"t0.sysId " +
                            $",t0.companyId " +
                            $",t0.userIdName " +
                            $",t0.sapId " +
                            $",t0.displayName " +
                            $",t0.lastModiDate " +
                            $",t0.lastModiUser " +
                            $",t0.locked " +
                            $",t1.groupId " +
                            $",t2.groupName " +
                        $"FROM {nameof(zwaUser)} t0 " +
                            $"LEFT JOIN {nameof(zwaUser1)} t1 ON t0.sysId = t1.userId " +
                            $"LEFT JOIN {nameof(zwaUserGroup)} t2 ON t1.groupId = t2.groupId " +
                        $"WHERE t1.groupId = @groupId " +
                        $"AND t0.companyId = @companyId";

                var param = new { groupId, companyId };
                using (var conn = new SqlConnection(this.db_conn_sap))
                {
                    return conn.Query<zwaUser>(query, param).ToArray();
                }
            }
            catch (Exception excep)
            {
                LastErrorMessage = $"{excep}";
                return null;
            }
        }

        /// <summary>
        /// Query list of the user with not group and not company
        /// </summary>
        /// <param name="companyId"></param>
        /// <param name="groupId"></param>
        /// <returns></returns>
        public zwaUser[] GetNotGroupUsers(string companyId, int groupId)
        {
            try
            {
                string query =
                       $"SELECT DISTINCT " +
                           $"t0.sysId " +
                           $",t0.companyId " +
                           $",t0.userIdName " +
                           $",t0.sapId " +
                           $",t0.displayName " +
                           $",t0.lastModiDate " +
                           $",t0.lastModiUser " +
                           $",t0.locked " +
                           $",t1.groupId " +
                           $",t2.groupName " +
                       $"FROM {nameof(zwaUser)} t0 " +
                           $"LEFT JOIN {nameof(zwaUser1)} t1 ON t0.sysId = t1.userId " +
                           $"LEFT JOIN {nameof(zwaUserGroup)} t2 ON t1.groupId = t2.groupId " +
                       $"WHERE t2.groupId != @groupId " +
                       $"AND t0.companyId = @companyId " +
                       $"ORDER BY t2.groupName";

                var param = new { groupId, companyId };
                using (var conn = new SqlConnection(this.db_conn_sap))
                {
                    return conn.Query<zwaUser>(query, param).ToArray();
                }
            }
            catch (Exception excep)
            {
                LastErrorMessage = $"{excep}";
                return null;
            }
        }

        /// <summary>
        /// Update the zwaUser exiting record 
        /// </summary>
        /// <param name="editedUser"></param>
        /// <returns></returns>
        public int UpdateAppUser(Cio cio)
        {
            try
            {
                var editedUser = cio.newzwaUser;
                string sql =
                    $"UPDATE {nameof(zwaUser)} " +
                    $"SET " +
                        $"companyId = @companyId" +
                        $",userIdName = @userIdName" +
                        $",password = @password" +
                        $",sapId = @sapId" +
                        $",displayName = @displayName" +
                        $",lastModiDate = GETDATE()" +
                        $",lastModiUser = @lastModiUser" +
                        $",locked = @locked" +
                        $",Roles = @Roles" +
                        $",phoneNumber = @phoneNumber" +
                        $",email = @email" +
                        $",RoleDesc = @RoleDesc" +
                        $",CreateERPSalesEmp = @createERPSalesEmp " +
                    $"WHERE sysId = @sysId";

                BeginTransaction();
                var result = conn.Execute(sql, editedUser, transaction);

                if (result > 0)
                {
                    result = UpdateUserLog("UPDATE", editedUser); // insrt a user table change log
                }

                if (result > 0)
                {
                    result = UpdatezwaUserGroupRelationshipTable(editedUser);     // update the zwauser1 (for group user relationship                    
                }

                if (result > 0)
                {
                    if (editedUser.createERPSalesEmp == 1)
                    {
                        bool isExist = IsSAPSalesEmployeeExist(editedUser.sapId, editedUser.userIdName);
                        if (!isExist) result = PostToSAPNewUserRequest(editedUser, cio);
                    }
                }

                if (result > 0)
                {
                    Commit();
                }
                return result;
            }
            catch (Exception excep)
            {
                RollBack();
                LastErrorMessage = $"{excep}";
                return -1;
            }
        }

        /// <summary>
        /// Perform update to the user <--> group link
        /// </summary>
        /// <param name="userId"></param>
        /// <param name="grouId"></param>
        int UpdatezwaUserGroupRelationshipTable(zwaUser user)
        {
            /// Create the reference and use in the code
            var userExt = new zwaUser1();
            userExt.groupId = user.groupId;
            userExt.lastModiUser = user.lastModiUser;
            userExt.userIdName = user.userIdName;
            userExt.userId = user.sysId;

            try
            {
                if (IsUserGroupExist(user.userIdName, user.sysId))
                {
                    // prepare update statement
                    string updateQuery =
                        $"UPDATE {nameof(zwaUser1)} " +
                        $"SET " +
                            $"groupId=@groupId" +
                            $",lastModiDate=GETDATE()" +
                            $",lastModiUser=@lastModiUser " +
                        $"WHERE userIdName=@userIdName " +
                        $"AND userId = @userId";

                    var updateResult = conn.Execute(updateQuery, userExt, transaction);
                    if (updateResult > 0)
                    {
                        updateResult = UpdateUser1Log("UPDATE", userExt);
                    }
                    return updateResult;
                }
                // ELSE
                // prepare insert
                string insertQuery = $"INSERT INTO {nameof(zwaUser1)}(" +
                        $"userId" +
                        $",userIdName" +
                        $",groupId" +
                        $",lastModiDate" +
                        $",lastModiUser" +
                        $")VALUES(" +
                            $"@userId" +
                            $",@userIdName" +
                            $",@groupId" +
                            $",GETDATE()" +
                            $",@lastModiUser" +
                            $")SELECT CAST(SCOPE_IDENTITY() AS INT)";

                var insertResult = conn.ExecuteScalar<int>(insertQuery, userExt, transaction);
                if (insertResult > 0)
                {
                    userExt.id = insertResult;
                    insertResult = UpdateUser1Log("INSERT", userExt);
                }
                return insertResult;
            }
            catch (Exception excep)
            {
                RollBack();
                LastErrorMessage = $"{excep}";
                return -1;
            }
        }

        /// <summary>
        /// For create the app user
        /// </summary>
        /// <param name="newUser"></param>
        /// <returns></returns>
        public int CreateAppUser(Cio cio)
        {
            try
            {
                string sql = $"INSERT INTO {nameof(zwaUser)}(" +
                           $"companyId" +
                           $",userIdName" +
                           $",password" +
                           $",sapId" +
                           $",displayName" +
                           $",lastModiDate" +
                           $",lastModiUser" +
                           $",locked" +
                           $",Roles" +
                           $",phoneNumber" +
                           $",email" +
                           $",RoleDesc" +
                           $",CreateERPSalesEmp " +
                           $")VALUES(" +
                           $"@companyId" +
                           $",@userIdName" +
                           $",@password" +
                           $",@sapId" +
                           $",@displayName" +
                           $",GETDATE()" + //<--- lastModiDate
                           $",@lastModiUser" +
                           $",@locked" +
                           $",@Roles" +
                           $",@phoneNumber" +
                           $",@email" +
                           $",@RoleDesc" +
                           $",@CreateERPSalesEmp" +
                           $")SELECT CAST(SCOPE_IDENTITY() AS INT)";

                BeginTransaction();
                var newUser = cio.newzwaUser;
                var result = conn.ExecuteScalar<int>(sql, newUser, transaction);

                if (result > 0)
                {
                    newUser.sysId = result;
                    result = UpdateUserLog("INSERT", newUser); // insrt a user table change log
                }

                if (result > 0)
                {
                    // update the group relation
                    if (newUser.groupId > -1)
                    {
                        result = UpdatezwaUserGroupRelationshipTable(newUser);
                    }
                }

                if (result > 0)
                {
                    if (newUser.createERPSalesEmp == 1)
                    {
                        bool isExist = IsSAPSalesEmployeeExist(newUser.sapId, newUser.userIdName);
                        if (!isExist) result = PostToSAPNewUserRequest(newUser, cio);
                    }
                }

                if (result > 0)
                {
                    Commit();
                }
                return result;
            }
            catch (Exception excep)
            {
                RollBack();
                LastErrorMessage = $"{excep}";
                return -1;
            }
        }

        /// <summary>
        /// Check SAP Sales Employee ID Exist in SAP database
        /// </summary>
        /// <param name="sapId"></param>
        /// <returns></returns>
        bool IsSAPSalesEmployeeExist(string sapId, string userIdName)
        {
            try
            {
                using var conn = new SqlConnection(db_conn_sap);
                var salesEmployee = conn.Query<OSLP>(
                    $"SELECT * " +
                    $"FROM {nameof(OSLP)} " +
                    $"WHERE SlpCode = @sapId " +
                    $"AND SlpName = @userIdName",
                    new { sapId, userIdName }).FirstOrDefault();

                return (salesEmployee == null) ? false : true;
            }
            catch (Exception excep)
            {
                LastErrorMessage = $"{excep}";
                return true; // if error occur assume the sap record exist and prevent code recreate 
            }
        }

        /// <summary>
        /// create entry to the change log
        /// </summary>
        /// <returns></returns>

        int UpdateUser1Log(string action, zwaUser1 newUser)
        {
            try
            {
                string sql = $"INSERT INTO {nameof(zwaUser1Log)}(" +
                                $"userId" +
                                $",userIdName" +
                                $",groupId" +
                                $",lastModiDate" +
                                $",lastModiUser" +
                                $",action" +
                                $")VALUES(" +
                                $"@userId" +
                                $",@userIdName" +
                                $",@groupId" +
                                $",GETDATE()" +
                                $",@lastModiUser" +
                                $",@action)";

                return conn.Execute(sql, new zwaUser1Log(action, newUser), transaction);
            }
            catch (Exception excep)
            {
                RollBack();
                LastErrorMessage = $"{excep}";
                return -1;
            }
        }

        /// <summary>
        /// create entry to the change log
        /// </summary>
        /// <returns></returns>
        int UpdateUserLog(string action, zwaUser user)
        {
            try
            {
                string sql = $"INSERT INTO {nameof(zwaUserLog)}(" +
                          $"sysId" +
                          $",companyId" +
                          $",userIdName" +
                          $",password" +
                          $",sapId" +
                          $",displayName" +
                          $",lastModiDate" +
                          $",lastModiUser" +
                          $",locked" +
                          $",Roles" +
                          $",phoneNumber" +
                          $",email" +
                          $",RoleDesc" +
                          $",action" +
                          $")VALUES(" +
                          $"@sysId" +
                          $",@companyId" +
                          $",@userIdName" +
                          $",@password" +
                          $",@sapId" +
                          $",@displayName" +
                          $",GETDATE()" +
                          $",@lastModiUser" +
                          $",@locked" +
                          $",@Roles" +
                          $",@phoneNumber" +
                          $",@email" +
                          $",@RoleDesc" +
                          $",@action)";

                return conn.Execute(sql, new zwaUserLog(action, user), transaction);
            }
            catch (Exception excep)
            {
                RollBack();
                LastErrorMessage = $"{excep}";
                return -1;
            }
        }

        /// <summary>
        /// To request server create new sales employe
        /// </summary>
        /// <param name="user"></param>
        /// <returns></returns>
        public int PostToSAPNewUserRequest(zwaUser user, Cio cio)
        {
            try
            {
                var request = new zwaRequest
                {
                    request = "Create SAP SalesEmp",
                    sapUser = cio.sap_logon_name,
                    sapPassword = cio.sap_logon_pw,
                    requestTime = DateTime.Now,
                    phoneRegID = cio.phoneRegID,
                    status = "ONHOLD",
                    guid = Guid.NewGuid(),
                    completedTime = DateTime.Now,
                    attachFileCnt = 0,
                    tried = 0,
                    createSAPUserSysId = user.sysId
                };

                string insertSql = $"INSERT INTO {nameof(zwaRequest)}(" +
                                   $"request" +
                                   $",sapUser" +
                                   $",sapPassword " +
                                   $",requestTime" +
                                   $",phoneRegID" +
                                   $",status" +
                                   $",guid" +
                                   $",sapDocNumber" +
                                   $",completedTime" +
                                   $",attachFileCnt" +
                                   $",tried" +
                                   $",createSAPUserSysId" +
                                   $")VALUES(" +
                                   $"@request" +
                                   $",@sapUser" +
                                   $",@sapPassword " +
                                   $",@requestTime" +
                                   $",@phoneRegID" +
                                   $",@status" +
                                   $",@guid" +
                                   $",@sapDocNumber" +
                                   $",@completedTime" +
                                   $",@attachFileCnt" +
                                   $",@tried" +
                                   $",@createSAPUserSysId)";

                using var conn = new SqlConnection(db_conn_sap);
                return conn.Execute(insertSql, request);
            }
            catch (Exception excep)
            {
                LastErrorMessage = $"{excep}";
                return -1;
            }
        }
    }
}
